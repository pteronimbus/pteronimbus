services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: pteronimbus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pteronimbus
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pteronimbus"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pteronimbus-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pteronimbus-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pteronimbus-network

  # Backend API Service
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: pteronimbus-backend
    restart: unless-stopped
    environment:
      # Server Configuration
      PORT: 8080
      HOST: 0.0.0.0
      ENVIRONMENT: development
      FRONTEND_URL: http://localhost:3000
      
      # Discord OAuth2 Configuration (you'll need to set these)
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID:-your_discord_client_id}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET:-your_discord_client_secret}
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN:-your_discord_bot_token}
      DISCORD_REDIRECT_URL: http://localhost:8080/auth/callback
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-please
      JWT_ISSUER: pteronimbus
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis123
      REDIS_DB: 0
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_NAME: pteronimbus
      DB_SSLMODE: disable
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pteronimbus-network

  # Controller Service
  controller:
    build:
      context: ./apps/controller
      dockerfile: Dockerfile
    container_name: pteronimbus-controller
    restart: unless-stopped
    environment:
      PORT: 8080
      HOST: 0.0.0.0
      ENVIRONMENT: development
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pteronimbus-network

  # Frontend Service
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: pteronimbus-frontend
    restart: unless-stopped
    environment:
      BACKEND_URL: http://backend:8080
      NUXT_PUBLIC_BACKEND_URL: http://localhost:8080
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID:-your_discord_client_id}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pteronimbus-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  pteronimbus-network:
    driver: bridge
