---
description: Whenever we're working with auth, permissions, or RBAC
alwaysApply: false
---
# RBAC System Design

## Overview

Multi-tenant RBAC system with Discord integration for Pteronimbus game server management platform.

## Core Principles

1. **Security First**: All decisions prioritize security
2. **Least Privilege**: Minimum necessary permissions
3. **Tenant Isolation**: Complete isolation between tenants
4. **Session-Based**: Permissions stored in Redis sessions, not JWT
5. **Fail Secure**: Default to deny access

## Architecture

### JWT Structure (Minimal)
```go
type JWTCustomClaims struct {
    UserID    string `json:"user_id"`
    DiscordUserID string `json:"discord_user_id"`
    Username  string `json:"username"`
    SessionID string `json:"session_id"` // Redis session key
    IssuedAt  int64  `json:"iat"`
    ExpiresAt int64  `json:"exp"`
    Issuer    string `json:"iss"`
}
```

### Redis Session Structure
```go
type UserSession struct {
    UserID       string                     `json:"user_id"`
    Username     string                     `json:"username"`
    IsSuperAdmin bool                       `json:"is_super_admin"`
    TenantRoles  map[string][]string        `json:"tenant_roles"` // tenant_id -> role_names[]
    Permissions  map[string][]Permission    `json:"permissions"`   // tenant_id -> permissions[]
    LastSync     time.Time                  `json:"last_sync"`
    CreatedAt    time.Time                  `json:"created_at"`
    ExpiresAt    time.Time                  `json:"expires_at"`
}
```

### Permission Structure
```go
type Permission struct {
    Resource string // 'server', 'console', 'file', 'backup', 'log', 'template', 'user', 'role'
    Action   string // 'create', 'read', 'write', 'delete', 'start', 'stop', 'restart', 'execute'
    Scope    string // 'own', 'tenant', 'global'
}
```

## Database Schema

```sql
-- User roles across tenants
CREATE TABLE user_tenant_roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
    roles TEXT[] NOT NULL DEFAULT '{}',
    discord_roles TEXT[] NOT NULL DEFAULT '{}',
    last_sync TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, tenant_id)
);

-- Role definitions
CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    permissions TEXT[] NOT NULL DEFAULT '{}',
    is_system_role BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(tenant_id, name)
);

-- Permission definitions
CREATE TABLE permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    resource VARCHAR(100) NOT NULL,
    action VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Audit log
CREATE TABLE permission_audit_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    tenant_id UUID REFERENCES tenants(id),
    action VARCHAR(50) NOT NULL,
    resource_type VARCHAR(50) NOT NULL,
    resource_id VARCHAR(100),
    old_value TEXT,
    new_value TEXT,
    reason TEXT,
    performed_by UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Guild membership cache
CREATE TABLE guild_membership_cache (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    guild_id VARCHAR(20) NOT NULL,
    roles TEXT[] NOT NULL DEFAULT '{}',
    permissions BIGINT NOT NULL DEFAULT 0,
    last_sync TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    UNIQUE(user_id, guild_id)
);

-- Indexes
CREATE INDEX idx_user_tenant_roles_user_id ON user_tenant_roles(user_id);
CREATE INDEX idx_user_tenant_roles_tenant_id ON user_tenant_roles(tenant_id);
CREATE INDEX idx_guild_membership_cache_user_id ON guild_membership_cache(user_id);
CREATE INDEX idx_guild_membership_cache_expires ON guild_membership_cache(expires_at);
CREATE INDEX idx_permission_audit_log_user_id ON permission_audit_log(user_id);
CREATE INDEX idx_permission_audit_log_tenant_id ON permission_audit_log(tenant_id);
CREATE INDEX idx_permission_audit_log_created_at ON permission_audit_log(created_at);

-- Row-Level Security
ALTER TABLE user_tenant_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE permission_audit_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE guild_membership_cache ENABLE ROW LEVEL SECURITY;

CREATE POLICY tenant_isolation_user_tenant_roles ON user_tenant_roles
    FOR ALL USING (tenant_id = current_setting('app.current_tenant_id')::uuid);

CREATE POLICY tenant_isolation_roles ON roles
    FOR ALL USING (tenant_id = current_setting('app.current_tenant_id')::uuid);

CREATE POLICY tenant_isolation_audit_log ON permission_audit_log
    FOR ALL USING (tenant_id = current_setting('app.current_tenant_id')::uuid);
```

## Configuration

```go
type RBACConfig struct {
    SuperAdminDiscordID string
    RoleSyncTTL         time.Duration // 5 minutes
    GuildCacheTTL       time.Duration // 5 minutes
    GracePeriod         time.Duration // 2 minutes
}
```

## Implementation Tasks

### Phase 1: Core Infrastructure

#### Task 1.1: Database Schema
- [x] Create database migration for user_tenant_roles table
- [x] Create database migration for roles table
- [x] Create database migration for permissions table
- [ ] Create database migration for permission_audit_log table
- [x] Create database migration for guild_membership_cache table
- [x] Add indexes for performance
- [ ] Enable Row-Level Security on all tenant-scoped tables
- [ ] Create RLS policies for tenant isolation

#### Task 1.2: Core Models
- [x] Create User model with RBAC methods
- [ ] Create Permission model
- [ ] Create Role model
- [x] Create UserTenantRole model
- [x] Create GuildMembershipCache model
- [ ] Create PermissionAuditLog model

#### Task 1.3: Session Management
- [x] Create SessionManager struct
- [x] Implement CreateSession method
- [x] Implement GetSession method
- [x] Implement DeleteSession method
- [x] Implement RefreshSession method
- [x] Add session TTL configuration

#### Task 1.4: Permission System
- [ ] Create Permission struct
- [-] Implement HasPermission method
- [ ] Create permission constants (server:read, server:write, etc.)
- [ ] Implement permission inheritance logic
- [ ] Create permission validation middleware

#### Task 1.5: Super Admin Integration
- [x] Add SUPER_ADMIN_DISCORD_ID to config
- [ ] Implement super admin check in user creation
- [ ] Add super admin bypass in permission checks
- [ ] Create super admin recovery documentation

### Phase 2: Discord Integration

#### Task 2.1: Guild Discovery
- [x] Create DiscordGuildService
- [x] Implement GetUserGuilds method
- [-] Implement guild caching with TTL
- [ ] Add rate limiting for Discord API calls
- [ ] Implement exponential backoff for API failures

#### Task 2.2: Role Synchronization
- [ ] Create DiscordRoleService
- [ ] Implement GetUserRoles method
- [ ] Create Discord permission to Pteronimbus permission mapping
- [ ] Implement role sync on login/refresh
- [ ] Add background role sync job

#### Task 2.3: Tenant Mapping
- [-] Implement tenant discovery from user guilds
- [-] Create user-tenant relationship management
- [ ] Implement 2-minute grace period for removals
- [-] Add tenant access validation

### Phase 3: API Integration

#### Task 3.1: Authentication Middleware
- [x] Update JWT validation to use session_id
- [-] Implement session validation middleware
- [ ] Add tenant context extraction
- [-] Implement tenant access validation

#### Task 3.2: Permission Middleware
- [ ] Create RequirePermission middleware
- [ ] Implement permission checking logic
- [ ] Add super admin bypass
- [ ] Create permission decorators for routes

#### Task 3.3: API Endpoints
- [ ] Create /api/rbac/roles endpoint
- [ ] Create /api/rbac/permissions endpoint
- [ ] Create /api/rbac/users endpoint
- [ ] Add permission checks to existing endpoints
- [ ] Implement tenant-scoped queries

### Phase 4: Security Hardening

#### Task 4.1: Error Handling
- [ ] Implement error message sanitization
- [ ] Add generic error responses
- [ ] Create error logging with context
- [ ] Implement graceful degradation

#### Task 4.2: Rate Limiting
- [ ] Implement per-user rate limiting
- [ ] Implement per-tenant rate limiting
- [ ] Add Discord API rate limiting
- [ ] Create rate limit monitoring

#### Task 4.3: Audit Logging
- [ ] Implement permission change logging
- [ ] Add role assignment logging
- [ ] Create audit log queries
- [ ] Implement audit log rotation

### Phase 5: Testing

#### Task 5.1: Unit Tests
- [ ] Test permission checking logic
- [ ] Test session management
- [ ] Test role synchronization
- [ ] Test tenant isolation

#### Task 5.2: Integration Tests
- [ ] Test Discord API integration
- [ ] Test database RLS policies
- [ ] Test API endpoint security
- [ ] Test cross-tenant isolation

#### Task 5.3: Security Tests
- [ ] Test permission bypass attempts
- [ ] Test cross-tenant data access
- [ ] Test session hijacking
- [ ] Test rate limiting

## Security Checklist

- [ ] Row-Level Security enabled on all tenant-scoped tables
- [ ] Session-based permission management implemented
- [ ] All database queries scoped by tenant_id
- [ ] Error messages sanitized
- [ ] Rate limiting implemented
- [ ] Audit logging for all permission changes
- [ ] Super admin environment variable configured
- [ ] 2-minute grace period for role removals
- [ ] Cross-tenant access prevention
- [ ] Security testing completed # RBAC System Design

## Overview

Multi-tenant RBAC system with Discord integration for Pteronimbus game server management platform.

## Core Principles

1. **Security First**: All decisions prioritize security
2. **Least Privilege**: Minimum necessary permissions
3. **Tenant Isolation**: Complete isolation between tenants
4. **Session-Based**: Permissions stored in Redis sessions, not JWT
5. **Fail Secure**: Default to deny access

## Architecture

### JWT Structure (Minimal)
```go
type JWTCustomClaims struct {
    UserID    string `json:"user_id"`
    DiscordUserID string `json:"discord_user_id"`
    Username  string `json:"username"`
    SessionID string `json:"session_id"` // Redis session key
    IssuedAt  int64  `json:"iat"`
    ExpiresAt int64  `json:"exp"`
    Issuer    string `json:"iss"`
}
```

### Redis Session Structure
```go
type UserSession struct {
    UserID       string                     `json:"user_id"`
    Username     string                     `json:"username"`
    IsSuperAdmin bool                       `json:"is_super_admin"`
    TenantRoles  map[string][]string        `json:"tenant_roles"` // tenant_id -> role_names[]
    Permissions  map[string][]Permission    `json:"permissions"`   // tenant_id -> permissions[]
    LastSync     time.Time                  `json:"last_sync"`
    CreatedAt    time.Time                  `json:"created_at"`
    ExpiresAt    time.Time                  `json:"expires_at"`
}
```

### Permission Structure
```go
type Permission struct {
    Resource string // 'server', 'console', 'file', 'backup', 'log', 'template', 'user', 'role'
    Action   string // 'create', 'read', 'write', 'delete', 'start', 'stop', 'restart', 'execute'
    Scope    string // 'own', 'tenant', 'global'
}
```

## Database Schema

```sql
-- User roles across tenants
CREATE TABLE user_tenant_roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
    roles TEXT[] NOT NULL DEFAULT '{}',
    discord_roles TEXT[] NOT NULL DEFAULT '{}',
    last_sync TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, tenant_id)
);

-- Role definitions
CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id UUID REFERENCES tenants(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    permissions TEXT[] NOT NULL DEFAULT '{}',
    is_system_role BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(tenant_id, name)
);

-- Permission definitions
CREATE TABLE permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    resource VARCHAR(100) NOT NULL,
    action VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Audit log
CREATE TABLE permission_audit_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    tenant_id UUID REFERENCES tenants(id),
    action VARCHAR(50) NOT NULL,
    resource_type VARCHAR(50) NOT NULL,
    resource_id VARCHAR(100),
    old_value TEXT,
    new_value TEXT,
    reason TEXT,
    performed_by UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Guild membership cache
CREATE TABLE guild_membership_cache (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    guild_id VARCHAR(20) NOT NULL,
    roles TEXT[] NOT NULL DEFAULT '{}',
    permissions BIGINT NOT NULL DEFAULT 0,
    last_sync TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    UNIQUE(user_id, guild_id)
);

-- Indexes
CREATE INDEX idx_user_tenant_roles_user_id ON user_tenant_roles(user_id);
CREATE INDEX idx_user_tenant_roles_tenant_id ON user_tenant_roles(tenant_id);
CREATE INDEX idx_guild_membership_cache_user_id ON guild_membership_cache(user_id);
CREATE INDEX idx_guild_membership_cache_expires ON guild_membership_cache(expires_at);
CREATE INDEX idx_permission_audit_log_user_id ON permission_audit_log(user_id);
CREATE INDEX idx_permission_audit_log_tenant_id ON permission_audit_log(tenant_id);
CREATE INDEX idx_permission_audit_log_created_at ON permission_audit_log(created_at);

-- Row-Level Security
ALTER TABLE user_tenant_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE permission_audit_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE guild_membership_cache ENABLE ROW LEVEL SECURITY;

CREATE POLICY tenant_isolation_user_tenant_roles ON user_tenant_roles
    FOR ALL USING (tenant_id = current_setting('app.current_tenant_id')::uuid);

CREATE POLICY tenant_isolation_roles ON roles
    FOR ALL USING (tenant_id = current_setting('app.current_tenant_id')::uuid);

CREATE POLICY tenant_isolation_audit_log ON permission_audit_log
    FOR ALL USING (tenant_id = current_setting('app.current_tenant_id')::uuid);
```

## Configuration

```go
type RBACConfig struct {
    SuperAdminDiscordID string
    RoleSyncTTL         time.Duration // 5 minutes
    GuildCacheTTL       time.Duration // 5 minutes
    GracePeriod         time.Duration // 2 minutes
}
```

## Implementation Tasks

### Phase 1: Core Infrastructure

#### Task 1.1: Database Schema
- [x] Create database migration for user_tenant_roles table
- [x] Create database migration for roles table
- [x] Create database migration for permissions table
- [ ] Create database migration for permission_audit_log table
- [x] Create database migration for guild_membership_cache table
- [x] Add indexes for performance
- [ ] Enable Row-Level Security on all tenant-scoped tables
- [ ] Create RLS policies for tenant isolation

#### Task 1.2: Core Models
- [x] Create User model with RBAC methods
- [ ] Create Permission model
- [ ] Create Role model
- [x] Create UserTenantRole model
- [x] Create GuildMembershipCache model
- [ ] Create PermissionAuditLog model

#### Task 1.3: Session Management
- [x] Create SessionManager struct
- [x] Implement CreateSession method
- [x] Implement GetSession method
- [x] Implement DeleteSession method
- [x] Implement RefreshSession method
- [x] Add session TTL configuration

#### Task 1.4: Permission System
- [ ] Create Permission struct
- [-] Implement HasPermission method
- [ ] Create permission constants (server:read, server:write, etc.)
- [ ] Implement permission inheritance logic
- [ ] Create permission validation middleware

#### Task 1.5: Super Admin Integration
- [x] Add SUPER_ADMIN_DISCORD_ID to config
- [ ] Implement super admin check in user creation
- [ ] Add super admin bypass in permission checks
- [ ] Create super admin recovery documentation

### Phase 2: Discord Integration

#### Task 2.1: Guild Discovery
- [x] Create DiscordGuildService
- [x] Implement GetUserGuilds method
- [-] Implement guild caching with TTL
- [ ] Add rate limiting for Discord API calls
- [ ] Implement exponential backoff for API failures

#### Task 2.2: Role Synchronization
- [ ] Create DiscordRoleService
- [ ] Implement GetUserRoles method
- [ ] Create Discord permission to Pteronimbus permission mapping
- [ ] Implement role sync on login/refresh
- [ ] Add background role sync job

#### Task 2.3: Tenant Mapping
- [-] Implement tenant discovery from user guilds
- [-] Create user-tenant relationship management
- [ ] Implement 2-minute grace period for removals
- [-] Add tenant access validation

### Phase 3: API Integration

#### Task 3.1: Authentication Middleware
- [x] Update JWT validation to use session_id
- [-] Implement session validation middleware
- [ ] Add tenant context extraction
- [-] Implement tenant access validation

#### Task 3.2: Permission Middleware
- [ ] Create RequirePermission middleware
- [ ] Implement permission checking logic
- [ ] Add super admin bypass
- [ ] Create permission decorators for routes

#### Task 3.3: API Endpoints
- [ ] Create /api/rbac/roles endpoint
- [ ] Create /api/rbac/permissions endpoint
- [ ] Create /api/rbac/users endpoint
- [ ] Add permission checks to existing endpoints
- [ ] Implement tenant-scoped queries

### Phase 4: Security Hardening

#### Task 4.1: Error Handling
- [ ] Implement error message sanitization
- [ ] Add generic error responses
- [ ] Create error logging with context
- [ ] Implement graceful degradation

#### Task 4.2: Rate Limiting
- [ ] Implement per-user rate limiting
- [ ] Implement per-tenant rate limiting
- [ ] Add Discord API rate limiting
- [ ] Create rate limit monitoring

#### Task 4.3: Audit Logging
- [ ] Implement permission change logging
- [ ] Add role assignment logging
- [ ] Create audit log queries
- [ ] Implement audit log rotation

### Phase 5: Testing

#### Task 5.1: Unit Tests
- [ ] Test permission checking logic
- [ ] Test session management
- [ ] Test role synchronization
- [ ] Test tenant isolation

#### Task 5.2: Integration Tests
- [ ] Test Discord API integration
- [ ] Test database RLS policies
- [ ] Test API endpoint security
- [ ] Test cross-tenant isolation

#### Task 5.3: Security Tests
- [ ] Test permission bypass attempts
- [ ] Test cross-tenant data access
- [ ] Test session hijacking
- [ ] Test rate limiting

## Security Checklist

- [ ] Row-Level Security enabled on all tenant-scoped tables
- [ ] Session-based permission management implemented
- [ ] All database queries scoped by tenant_id
- [ ] Error messages sanitized
- [ ] Rate limiting implemented
- [ ] Audit logging for all permission changes
- [ ] Super admin environment variable configured
- [ ] 2-minute grace period for role removals
- [ ] Cross-tenant access prevention
- [ ] Security testing completed 