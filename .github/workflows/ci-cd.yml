name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-go:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: [backend, controller]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.app }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.app }}-

    - name: Download dependencies
      working-directory: ./apps/${{ matrix.app }}
      run: go mod download

    - name: Run tests
      working-directory: ./apps/${{ matrix.app }}
      run: go test -v ./...

    - name: Run tests with coverage
      working-directory: ./apps/${{ matrix.app }}
      run: go test -v -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/${{ matrix.app }}/coverage.out
        name: ${{ matrix.app }}-coverage
        fail_ci_if_error: false

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: './apps/frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./apps/frontend
      run: npm ci --legacy-peer-deps

    - name: Run tests
      working-directory: ./apps/frontend
      run: npm test

    - name: Run tests with coverage
      working-directory: ./apps/frontend
      run: npm run test -- --coverage

  build:
    runs-on: ubuntu-latest
    needs: [test-go, test-frontend]
    permissions:
      contents: read
      packages: write
    
    strategy:
      fail-fast: false
      matrix:
        app: [backend, frontend, controller]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/${{ matrix.app }}
        file: ./apps/${{ matrix.app }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job that waits for all builds to complete
  pipeline-complete:
    runs-on: ubuntu-latest
    needs: [test-go, test-frontend, build]
    if: always()
    steps:
    - name: Check pipeline results
      run: |
        test_go_result="${{ needs.test-go.result }}"
        test_frontend_result="${{ needs.test-frontend.result }}"
        build_result="${{ needs.build.result }}"
        
        echo "=== Pipeline Results ==="
        echo "Go tests: $test_go_result"
        echo "Frontend tests: $test_frontend_result"
        echo "Docker builds: $build_result"
        
        if [ "$test_go_result" = "success" ] && [ "$test_frontend_result" = "success" ] && [ "$build_result" = "success" ]; then
          echo "✅ All pipeline steps completed successfully!"
        else
          echo "❌ Some pipeline steps failed"
          exit 1
        fi 